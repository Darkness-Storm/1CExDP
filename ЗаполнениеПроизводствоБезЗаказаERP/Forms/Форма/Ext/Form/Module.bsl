&НаКлиенте
Процедура ЗапуститьВыполнение(Команда)
	
	ПараметрыЗапуска = Новый Структура("Подразделение,ДатаНачала,ДатаОкончания", Подразделение,ДатаНачала,ДатаОкончания);
	
	СтруктураФоновогоЗадания = ВыполнитьФоновоеЗаданиеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	// указываем интервал обновления состояния в секундах, если не указать, 
	// то интервал будет увеличиваться при каждой итерации в 1.4 раза.
	ПараметрыОжидания.Интервал = 2;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		СтруктураФоновогоЗадания,
		Новый ОписаниеОповещения("ОбработатьДанные", ЭтотОбъект),
		ПараметрыОжидания);
	
КонецПроцедуры
	

&НаСервереБезКонтекста
Функция ВыполнитьФоновоеЗаданиеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор)

	НаименованиеЗадания = НСтр("ru = 'Заполнение документа Производство без заказа'");	
	ДополнительнаяОбработкаСсылка =  Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Заполнение документа Производство без заказа");
    //запуск фоновой процедуры происходит через метод "ВыполнитьПроцедуруМодуляОбъектаОбработки", 
	// куда мы передаем данные об обработке и о процедуре, которую необходимо запустить
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки", "ВнешняяОбработка.ЗаполнениеПроизводствоБезЗаказа");
	ПараметрыЗадания.Вставить("ИмяМетода", "ЗаполнитьНаСервереПроизводствоБезЗаказа");
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", ПараметрыЗапуска);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", Истина);
	ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", ДополнительнаяОбработкаСсылка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	
	Возврат СтруктураФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДанные(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		// обрабатываем результат
		Данные = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);	
		ЗаполнитьТЗСОшибками(Данные.СписокОшибок);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Обработано " + Строка(Данные.КоличествоДокументов) + " документов";
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТЗСОшибками(МассивОшибок)
	
	СписокОшибок.Загрузить(ПреобразоватьМассивВТаблицуЗначений(МассивОшибок));	
Конецпроцедуры

Функция ПреобразоватьМассивВТаблицуЗначений(МассивСтруктур) Экспорт
    
    ТаблицаЗначений = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из МассивСтруктур Цикл
        //Создаем колонки для таблицы
        Если ТаблицаЗначений.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                ТаблицаЗначений.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        //Добавляем данные в таблицу
        НоваяСтрока = ТаблицаЗначений.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат ТаблицаЗначений;
    
КонецФункции

