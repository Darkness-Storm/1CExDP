#Область ОписаниеПеременных

&НаКлиенте
Перем МассивИдентификаторов;
&НаКлиенте
Перем МассивАдресов;
&НаКлиенте
Перем ВсегоДокументов;
&НаКлиенте
Перем СписокПотоков;

#КонецОбласти

#Область ОбработчикиСобытийФормыЭлементов

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СформироватьСписокТиповДокументов();
	ЭтотОбъект.КоличествоПотоков = 5;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьСтатусКнопок();
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокТиповДокументов()

	Для Каждого Документ из Метаданные.Документы Цикл
		СписокТипов.Добавить(Документ.Имя);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусКнопок(Выполняется=Ложь)
	Элементы.КнопкаОтмены.Доступность = Выполняется;
    Элементы.ФормаКнопка1.Доступность = Не Выполняется;
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Элементы.ТипДокумента.СписокВыбора.Очистить();
	Для Каждого ТипДокумента Из СписокТипов Цикл
		Элементы.ТипДокумента.СписокВыбора.Добавить(ТипДокумента);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапуститьВыполнение(Команда)
	Валидация = ВалидацияПараметров();
	Если Валидация.СтатусВалидации Тогда

		Результат = ЗапускМногопоточнойОбработки();
		Ошибка = Неопределено;
		ЕстьОшибка = Результат.Свойство("Ошибка", Ошибка);
		Если ЕстьОшибка Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Ошибка;
			Сообщение.Сообщить();
		Иначе
			ЭтотОбъект.ПроцентВыполнения = 0;
			ЭтотОбъект.СтатусВыполнения = СтрШаблон("Выполняется: %1 из %2", 0, ВсегоДокументов);
			ОбновитьСтатусКнопок(Истина);
			МассивИдентификаторов = Результат.МассивИдентификаторов;
			МассивАдресов = Результат.МассивАдресов;
			ВсегоДокументов = Результат.ВсегоДокументов;
			СписокПотоков = Результат.СписокПотоков;		
			ПодключитьОбработчикОжидания("ПроверитьВыполнение", 1);
		КонецЕсли;
	Иначе
		ЭтотОбъект.СтатусВыполнения = "Ошибка проверки параметров";
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Валидация.Ошибка;
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнение() Экспорт
	 
	Если ЗаданиеВыполнено(МассивИдентификаторов, СписокПотоков) Тогда
		
		ОбработатьРезультаты();
		ОтключитьОбработчикОжидания("ПроверитьВыполнение");
		ПоказатьОповещениеПользователя("Задание выполнено");
	Иначе
		ТекущееКоличествоОбработанных = ПолучениеКоличестваОбработанныхДокументов(МассивИдентификаторов, СписокПотоков);
		ЭтотОбъект.ПроцентВыполнения = Окр(100 * ТекущееКоличествоОбработанных / ВсегоДокументов, 0);
		ЭтотОбъект.СтатусВыполнения = СтрШаблон("Выполняется: %1 из %2", ТекущееКоличествоОбработанных, ВсегоДокументов);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнениеЗаданий(МассивИдентификаторов)
	Для Каждого УИД Из МассивИдентификаторов Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(УИД);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	ОтменитьВыполнениеЗаданий(МассивИдентификаторов);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВалидацияПараметров()
	СтатусВалидации = Ложь;
	Ошибка = "";
	ПустаяДата = Дата("00010101000000");
	
	Если ДатаНачала = ПустаяДата ИЛИ ДатаОкончания = ПустаяДата Тогда
		Ошибка = "Не указаны даты отбора документов.";
	КонецЕсли;
	Если ВыборДействия = "" Тогда
		Ошибка = "Не выбрано действие для документа.";
	КонецЕсли;
	Если ТипДокумента = "" Тогда
		Ошибка = "Не выбран тип документа.";
	КонецЕсли;
	Если Ошибка = "" Тогда
		СтатусВалидации = Истина;
	КонецЕсли;
	Возврат Новый Структура("СтатусВалидации,Ошибка", СтатусВалидации, Ошибка);
КонецФункции

&НаСервереБезКонтекста
Функция ЗапросОбработкиДокументов(ТипДокумента, Действие, ПараметрыЗапроса)
	
	Если Действие = "УстановитьПометкуУдаления" Тогда
		Запрос = ЗапросПометкиУдаленияДокумента(ТипДокумента,ПараметрыЗапроса);
	ИначеЕсли Действие = "СнятьПометкуУдаления" Тогда
	    Запрос = ЗапросСнятьПометкуУдаленияДокумента(ТипДокумента,ПараметрыЗапроса);
	ИначеЕсли Действие = "Провести" Тогда
	    Запрос = ЗапросПроведениеДокумента(ТипДокумента,ПараметрыЗапроса);
	ИначеЕсли Действие = "ОтменитьПроведение" Тогда
	    Запрос = ЗапросОтменаПроведенияДокумента(ТипДокумента,ПараметрыЗапроса);
	КонецЕсли;
	Возврат Запрос;
КонецФункции

&НаСервереБезКонтекста
Функция ЗапросСнятьПометкуУдаленияДокумента(ТипДокумента,ПараметрыЗапроса)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	" + ТипДокумента + ".Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + ТипДокумента + " КАК " + ТипДокумента + "
		|ГДЕ
		|	" + ТипДокумента + ".Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И " + ТипДокумента + ".ПометкаУдаления = Истина";
	
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыЗапроса.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыЗапроса.ДатаОкончания);
	Возврат Запрос;
КонецФункции

&НаСервереБезКонтекста
Функция ЗапросПометкиУдаленияДокумента(ТипДокумента,ПараметрыЗапроса)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	" + ТипДокумента + ".Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + ТипДокумента + " КАК " + ТипДокумента + "
		|ГДЕ
		|	" + ТипДокумента + ".Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И " + ТипДокумента + ".ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыЗапроса.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыЗапроса.ДатаОкончания);
	Возврат Запрос;
КонецФункции

&НаСервереБезКонтекста
Функция ЗапросПроведениеДокумента(ТипДокумента,ПараметрыЗапроса)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	" + ТипДокумента + ".Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + ТипДокумента + " КАК " + ТипДокумента + "
		|ГДЕ
		|	" + ТипДокумента + ".Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыЗапроса.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыЗапроса.ДатаОкончания);
	Возврат Запрос;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапросОтменаПроведенияДокумента(ТипДокумента,ПараметрыЗапроса)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	" + ТипДокумента + ".Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + ТипДокумента + " КАК " + ТипДокумента + "
		|ГДЕ
		|	" + ТипДокумента + ".Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И " + ТипДокумента + ".Проведен = Истина";
	
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыЗапроса.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыЗапроса.ДатаОкончания);
	Возврат Запрос;
	
КонецФункции

&НаСервере
Функция ЗапускМногопоточнойОбработки()
    
	ПараметрыЗапроса = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	Запрос = ЗапросОбработкиДокументов(ТипДокумента, ВыборДействия, ПараметрыЗапроса);
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	//Записано = 0;
	ВсегоДокументов = Выборка.Количество();
	Если ВсегоДокументов = 0 Тогда
		Возврат Новый Структура("Ошибка","Количество документов для обработки - 0");
	ИначеЕсли ВсегоДокументов <= КоличествоПотоков Тогда
		КоличествоПотоков = 1;
		РазмерПорции = ВсегоДокументов;
	Иначе
		РазмерПорции = Цел(ВсегоДокументов/КоличествоПотоков);
	КонецЕсли;
	НачальныйИндексПорции = 0;
	КонечныйИндексПорции = РазмерПорции - 1;
	ЭтоПоследнийПоток = Ложь;
	
	МассивИдентификаторов = Новый Массив;
	МассивАдресов = Новый Массив;
	СписокПотоков = Новый Соответствие;
	
	Для НомерПотока = 1 по КоличествоПотоков Цикл
		КлючЗадания = Новый УникальныйИдентификатор;
		Порция = Новый Массив;
		
		Если НомерПотока = КоличествоПотоков Тогда
			ЭтоПоследнийПоток = Истина;
			КонечныйИндексПорции = ВсегоДокументов-1; 
		КонецЕсли;
		
		Для Индекс = НачальныйИндексПорции По КонечныйИндексПорции Цикл
			Порция.Добавить(Выборка.Получить(Индекс));
		КонецЦикла;
		
		ИмяМетода = "ВыполнитьДействиеСДокументом";
		СтруктураПараметров = Новый Структура("Порция,Действие",Порция,ВыборДействия);
		НаименованиеЗадания = СтрШаблон("Поток%1", НомерПотока);
		Задание = ВыполнитьФоновоеЗаданиеНаСервере(ИмяМетода,НаименованиеЗадания,СтруктураПараметров,КлючЗадания);
		Если Задание.Статус = "Ошибка" Тогда
			Сообщить(СтрШаблон("Поток №%1 завершился с ошибкой", НомерПотока));
			Сообщить(Задание.ПодробноеПредставлениеОшибки);
		Иначе
			МассивИдентификаторов.Добавить(Задание.ИдентификаторЗадания);
			МассивАдресов.Добавить(Задание.АдресРезультата);
			СписокПотоков.Вставить(НаименованиеЗадания,0);
			//ВсегоДокументов = ВсегоДокументов; 
		КонецЕсли;
		Если ЭтоПоследнийПоток Тогда
			Прервать;
		КонецЕсли;
		
		НачальныйИндексПорции = НачальныйИндексПорции + РазмерПорции;
		КонечныйИндексПорции  = КонечныйИндексПорции  + РазмерПорции;
	КонецЦикла;
    Результат = Новый Структура;
	Результат.Вставить("МассивИдентификаторов",МассивИдентификаторов);
	Результат.Вставить("МассивАдресов", МассивАдресов);
	Результат.Вставить("ВсегоДокументов",ВсегоДокументов);
	Результат.Вставить("СписокПотоков",СписокПотоков);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьФоновоеЗаданиеНаСервере(ИмяМетода, НаименованиеЗадания, ПараметрыМетода, КлючЗадания)
	
	ДополнительнаяОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(
		"Многопоточная обработка документов");
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки", "ВнешняяОбработка.МногопоточнаяОбработкаДокументов");
	ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетода);
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", ПараметрыМетода);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", Истина);
	ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", ДополнительнаяОбработкаСсылка);
	
	//НаименованиеЗадания = НаименованиеЗадания;	
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
    ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(КлючЗадания);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", КлючЗадания);
	//ПараметрыВыполнения.Вставить("АдресРезультата", АдресРезультата);
	ПараметрыВыполнения.Вставить("ОжидатьЗавершение", Истина);
	
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	
	Возврат СтруктураФоновогоЗадания;
	
КонецФункции

&НаСервере
Функция ПолучениеКоличестваОбработанныхДокументов(МассивИдентификаторов, СписокПотоков)
	Для Каждого УИД Из МассивИдентификаторов Цикл		
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УИД);
		Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			СообщенияИзФона = Задание.ПолучитьСообщенияПользователю(Истина);
			Если СообщенияИзФона.Количество() > 0 Тогда
				Последнее = СообщенияИзФона[СообщенияИзФона.Количество() - 1];
				КоличествоОбработанныхПотоком = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Последнее.Текст);
				Если КоличествоОбработанныхПотоком <> Неопределено Тогда
					СписокПотоков[Задание.Наименование] = КоличествоОбработанныхПотоком;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТекущееКоличествоОбработанных = 0;
	Для Каждого Поток Из СписокПотоков Цикл
		ТекущееКоличествоОбработанных = ТекущееКоличествоОбработанных + Поток.Значение;
	КонецЦикла;
	Возврат ТекущееКоличествоОбработанных;
КонецФункции

&НаСервере
Функция ЗаданиеВыполнено(МассивИдентификаторов, СписокПотоков)
	СтатусВыполненияВсехЗаданий = Истина;
	Для Каждого УИД Из МассивИдентификаторов Цикл		
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УИД);
		Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			СтатусВыполненияВсехЗаданий = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат СтатусВыполненияВсехЗаданий;
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультаты()
	ИтогоДокументов = 0;
	Для Каждого Адрес Из МассивАдресов Цикл
		Данные = ПолучитьИзВременногоХранилища(Адрес);
		Если ЗначениеЗаполнено(Данные) Тогда
			ЗаполнитьТЗСОшибками(Данные.СписокОшибок);
			ИтогоДокументов = ИтогоДокументов + Данные.КоличествоДокументов;
		КонецЕсли;
	КонецЦикла;
	ЭтотОбъект.ПроцентВыполнения = 100;	
	ЭтотОбъект.СтатусВыполнения = "Обработано " + 
		Строка(?(ИтогоДокументов > 0, ИтогоДокументов, ПолучениеКоличестваОбработанныхДокументов(МассивИдентификаторов, СписокПотоков))) + 
		" документов";
	ОбновитьСтатусКнопок();
КонецПроцедуры

Процедура ЗаполнитьТЗСОшибками(МассивОшибок)
	
	СписокОшибок.Загрузить(ПреобразоватьМассивВТаблицуЗначений(МассивОшибок));	
Конецпроцедуры

Функция ПреобразоватьМассивВТаблицуЗначений(МассивСтруктур) Экспорт
    
    ТаблицаЗначений = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из МассивСтруктур Цикл
        //Создаем колонки для таблицы
        Если ТаблицаЗначений.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                ТаблицаЗначений.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        //Добавляем данные в таблицу
        НоваяСтрока = ТаблицаЗначений.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат ТаблицаЗначений;
    
КонецФункции

#КонецОбласти






